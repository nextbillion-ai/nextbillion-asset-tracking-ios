// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NBAssetTracking
import CoreLocation
import CoreMotion
import Foundation
import NBAssetDataCollectLib
@_exported import NBAssetTracking
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AssetTrackingApiExceptionType : Swift.String {
  case ASSET_TRACKING_ON
  case UN_UPLOADED_LOCATION_DATA
  case EMPTY_ASSET_ID
  case ASSET_TRIP_ON
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LocationPermissionResult {
  case LOCATION_SERVICE_OFF
  case PERMISSION_ENABLED
  case PERMISSION_NOT_ENABLED
  public static func == (a: NBAssetTracking.LocationPermissionResult, b: NBAssetTracking.LocationPermissionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias StringDictionary = [Swift.String : Swift.String]
public typealias JSONDictionary = [Swift.String : Any]
@objc @_hasMissingDesignatedInitializers open class AssetTrackingInfo : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  final public let deviceId: Swift.String
  final public let locationDataList: [NBAssetDataCollectLib.LocationData]
  convenience public init(locationDataList: [NBAssetDataCollectLib.LocationData])
  convenience public init(json: NBAssetTracking.JSONDictionary)
  public func toJSONDictionary() -> NBAssetTracking.JSONDictionary
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TripLocation : Swift.Codable {
  public let lat: Swift.Double
  public let lon: Swift.Double
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LatestLocation : Swift.Codable {
  public let location: NBAssetTracking.TripLocation
  public let timestamp: Swift.Int
  public let accuracy: Swift.Double?
  public let speed: Swift.Double?
  public let bearing: Swift.Double?
  public let altitude: Swift.Double?
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class NBAssetTrackingService {
  public typealias NBAssetTrackingServiceVoidCompletionHandler = (_ responseCode: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void
  public typealias NBAssetTrackingResponseCompletionHandler<T> = (_ statusCode: Swift.Int, _ response: NBAssetTracking.ApiResponse<T>?, _ error: Foundation.NSError?) -> Swift.Void where T : Swift.Decodable, T : Swift.Encodable
  @discardableResult
  open func makeRequest<T>(requestOption: NBAssetTracking.AssetRequest, completionHandler: @escaping NBAssetTracking.NBAssetTrackingService.NBAssetTrackingResponseCompletionHandler<T>) -> Foundation.URLSessionDataTask where T : Swift.Decodable, T : Swift.Encodable
  @objc deinit
}
extension NBAssetTracking.NBAssetTrackingService {
  public func setCrossPlatformInfo(info: Swift.String)
  public func setUserId(userId: Swift.String)
}
public struct TripData : Swift.Codable {
  public let trip: NBAssetTracking.Trip
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Trip : Swift.Codable {
  public let id: Swift.String
  public let assetId: Swift.String
  public let state: Swift.String
  public let name: Swift.String
  public let description: Swift.String?
  public let metaData: [Swift.String : NBAssetTracking.AnyCodable]?
  public let attributes: [Swift.String : NBAssetTracking.AnyCodable]?
  public let startedAt: Swift.Double
  public let endedAt: Swift.Double?
  public let createdAt: Swift.Double
  public let updatedAt: Swift.Double?
  public let stops: [NBAssetTracking.TripStop]?
  public let route: [NBAssetTracking.TrackLocation]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc open class UpdateAssetProfile : ObjectiveC.NSObject, Swift.Codable {
  public init(name: Swift.String, description: Swift.String? = nil, attributes: [Swift.String : Swift.String]? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class AssetProfile : ObjectiveC.NSObject, Swift.Codable {
  public init(name: Swift.String, customId: Swift.String? = nil, description: Swift.String? = nil, attributes: [Swift.String : Swift.String]? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ErrorMessage {
  @objc deinit
}
public struct ErrorCode {
}
@objc @_hasMissingDesignatedInitializers public class AssetError : Foundation.NSError {
  public var errorCode: Swift.Int
  public var message: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NetworkError : NBAssetTracking.AssetError {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NoDataError : NBAssetTracking.AssetError {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UnreportedDataError : NBAssetTracking.AssetError {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ServiceRunningDataError : NBAssetTracking.AssetError {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class EmptyAssetIdError : NBAssetTracking.AssetError {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TripError : NBAssetTracking.AssetError {
  @objc deinit
}
public struct AssetResponseData : Swift.Codable {
  public let asset: NBAssetTracking.AssetInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssetInformation : Swift.Codable {
  public let id: Swift.String
  public let deviceId: Swift.String
  public let name: Swift.String
  public let assetDescription: Swift.String?
  public let createdAt: Swift.Double
  public let updatedAt: Swift.Double?
  public let attributes: [Swift.String : NBAssetTracking.AnyCodable]?
  public let state: Swift.String
  public let latestLocation: NBAssetTracking.LatestLocation?
  public let tags: [Swift.String]?
  public let metaData: [Swift.String : NBAssetTracking.AnyCodable]?
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol AssetTrackingDelegate : ObjectiveC.NSObjectProtocol {
  func onTrackingStart(assetId: Swift.String)
  func onTrackingStop(assetId: Swift.String, trackingDisableType: NBAssetTracking.TrackingDisableType)
  func onLocationSuccess(location: CoreLocation.CLLocation)
  func onLocationFailure(error: any Swift.Error)
  func onLocationServiceOff()
  func onTripStatusChanged(tripId: Swift.String, status: NBAssetTracking.TripStatus)
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isPluggedIn: Swift.Bool {
    @objc get
  }
}
public struct TrackLocation : Swift.Codable {
  public let accuracy: Swift.Double?
  public let altitude: Swift.Double?
  public let bearing: Swift.Double?
  public let location: NBAssetTracking.TripLocation?
  public let metaData: [Swift.String : NBAssetTracking.AnyCodable]?
  public let speed: Swift.Double?
  public let timestamp: Swift.Double
  public let batteryLevel: Swift.Int
  public let trackingMode: Swift.String
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol StationaryDetectionDelegate : AnyObject {
  func onStatusUpdate(isMoving: Swift.Bool)
  func onSensorUpdate(angularSpeed: Swift.Double?, acceleration: Swift.Double?, speed: Swift.Double?)
}
public protocol StationaryDetection {
  var delegate: (any NBAssetTracking.StationaryDetectionDelegate)? { get set }
  func attach()
  func dettach()
  func isSensorEnabled() -> Swift.Bool
  func updateLocation(_ location: CoreLocation.CLLocation)
}
@_hasMissingDesignatedInitializers public class StationaryDetectionImpl : NBAssetTracking.StationaryDetection {
  weak public var delegate: (any NBAssetTracking.StationaryDetectionDelegate)?
  public init()
  public func updateLocation(_ location: CoreLocation.CLLocation)
  public func isSensorEnabled() -> Swift.Bool
  public func attach()
  public func dettach()
  @objc deinit
}
@objc open class DataLog : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  final public let apiMessage: Swift.String
  final public let recordNames: [Swift.String]
  final public let assetId: Swift.String
  final public let assetTrackingInfo: NBAssetTracking.AssetTrackingInfo
  public init(apiMessage: Swift.String, recordNames: [Swift.String], assetId: Swift.String, assetTrackingInfo: NBAssetTracking.AssetTrackingInfo)
  public func toJSONDictionary() -> NBAssetTracking.JSONDictionary
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum TripStatus {
  case started
  case end
  case updated
  case deleted
  public static func == (a: NBAssetTracking.TripStatus, b: NBAssetTracking.TripStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RingBuffer<T> {
  public enum OverwriteOperation {
    case ignore
    case overwrite
    public static func == (a: NBAssetTracking.RingBuffer<T>.OverwriteOperation, b: NBAssetTracking.RingBuffer<T>.OverwriteOperation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFull: Swift.Bool {
    get
  }
  public init(_ size: Swift.Int)
  public init<S>(_ elements: S, capacity: Swift.Int) where T == S.Element, S : Swift.Sequence
  public mutating func enQueue(_ element: T)
  @discardableResult
  public mutating func deQueue() -> T?
  public func peek() -> T?
  public mutating func first() -> T?
  public func last() -> T?
  public func toList() -> [T?]
  public mutating func clear()
}
extension NBAssetTracking.RingBuffer : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NBAssetTracking.RingBuffer : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: T...)
  public typealias ArrayLiteralElement = T
}
extension NBAssetTracking.RingBuffer : Swift.Sequence {
  public func makeIterator() -> Swift.AnyIterator<T?>
  public typealias Element = T?
  public typealias Iterator = Swift.AnyIterator<T?>
}
public struct Asset : Swift.Codable {
  public let id: Swift.String
  public let deviceId: Swift.String
  public let state: Swift.String
  public let name: Swift.String
  public let description: Swift.String
  public let tags: [Swift.String]?
  public let metaData: [Swift.String : NBAssetTracking.AnyCodable]?
  public let createdAt: Swift.Double
  public let updatedAt: Swift.Double?
  public let attributes: [Swift.String : Swift.String]?
  public let latestLocation: NBAssetTracking.LatestLocation?
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiKeyHeader {
}
public struct ApiResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let status: Swift.String
  public let msg: Swift.String?
  public let data: T?
  public init(status: Swift.String, message: Swift.String?, data: T?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VoidData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripId : Swift.Codable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssetId : Swift.Codable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSummaryData : Swift.Codable {
  public let trip: NBAssetTracking.TripSummary
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TripSummary : Swift.Codable {
  public let id: Swift.String
  public let assetId: Swift.String
  public let state: Swift.String
  public let name: Swift.String
  public let description: Swift.String?
  public let metaData: [Swift.String : NBAssetTracking.AnyCodable]?
  public let attributes: [Swift.String : NBAssetTracking.AnyCodable]?
  public let startedAt: Swift.Double
  public let endedAt: Swift.Double?
  public let createdAt: Swift.Double?
  public let updatedAt: Swift.Double?
  public let stops: [NBAssetTracking.TripStop]?
  public let route: [NBAssetTracking.TrackLocation]?
  public let asset: NBAssetTracking.Asset
  public let distance: Swift.Double?
  public let duration: Swift.Double?
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyCodable : Swift.Codable {
  public var value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers open class ApiErrorResponse : ObjectiveC.NSObject {
  final public let status: Swift.String
  final public let message: Swift.String
  convenience public init(json: NBAssetTracking.JSONDictionary)
  @objc deinit
}
public enum TrackingMode : Swift.Int, Swift.Codable {
  case ACTIVE
  case BALANCED
  case PASSIVE
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class LocationConfig : ObjectiveC.NSObject, Swift.Codable {
  final public let trackingMode: NBAssetTracking.TrackingMode?
  final public let distanceFilter: CoreLocation.CLLocationDistance
  final public let desiredAccuracy: CoreLocation.CLLocationAccuracy
  final public let enableStationaryCheck: Swift.Bool
  public init(trackingMode: NBAssetTracking.TrackingMode = .ACTIVE)
  public init(distanceFilter: CoreLocation.CLLocationDistance = 0, desiredAccuracy: CoreLocation.CLLocationAccuracy = kCLLocationAccuracyBest, enableStationaryCheck: Swift.Bool = true)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public let gitRevision: Swift.String
public struct AssetRequest {
}
@objc @_inheritsConvenienceInitializers open class DataTrackingConfig : ObjectiveC.NSObject, Swift.Codable {
  public var baseUrl: Swift.String
  public var dataStorageSize: Swift.Int
  public var dataUploadingBatchSize: Swift.Int
  public var dataUploadingBatchWindow: Swift.Int
  public var shouldClearLocalDataWhenCollision: Swift.Bool
  public init(baseUrl: Swift.String, dataStorageSize: Swift.Int, dataUploadingBatchSize: Swift.Int, dataUploadingBatchWindow: Swift.Int, shouldClearLocalDataWhenCollision: Swift.Bool)
  @objc convenience override dynamic public init()
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AssetTracking : ObjectiveC.NSObject {
  public static let shared: NBAssetTracking.AssetTracking
  public var delegate: (any NBAssetTracking.AssetTrackingDelegate)? {
    get
    set
  }
  open func initialize(apiKey: Swift.String)
  open func setKeyOfHeader(headerName: Swift.String)
  open func startTracking()
  open func stopTracking()
  open func getApiKey() -> Swift.String
  open func getAssetId() -> Swift.String
  open func getActiveTripId() -> Swift.String?
  open func setLocationConfig(config: NBAssetTracking.LocationConfig)
  open func updateLocationConfig(config: NBAssetTracking.LocationConfig)
  open func getLocationConfig() -> NBAssetTracking.LocationConfig
  open func setDataTrackingConfig(config: NBAssetTracking.DataTrackingConfig)
  open func updateDataTrackingConfig(config: NBAssetTracking.DataTrackingConfig)
  open func getDataTrackingConfig() -> NBAssetTracking.DataTrackingConfig
  open func isRunning() -> Swift.Bool
  open func isTripInProgress() -> Swift.Bool
  open func setNotificationConfig(config: NBAssetTracking.NotificationConfig)
  open func updateNotificationConfig(config: NBAssetTracking.NotificationConfig)
  open func getNotificationConfig() -> NBAssetTracking.NotificationConfig
  open func isAllowFakeGps() -> Swift.Bool
  @available(iOS 15.0, *)
  open func setAllowFakeGps(allow: Swift.Bool)
  open func createAsset(assetProfile: NBAssetTracking.AssetProfile, completionHandler: @escaping (_ assetId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func getAssetDetail(completionHandler: @escaping (_ asset: NBAssetTracking.AssetInformation) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func updateAsset(assetProfile: NBAssetTracking.UpdateAssetProfile, completionHandler: @escaping (_ assetId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func bindAsset(assetId: Swift.String, completionHandler: @escaping (_ assetId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func forceBindAsset(assetId: Swift.String, completionHandler: @escaping (_ assetId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func startTrip(tripProfile: NBAssetTracking.TripProfile, turnOnTracking: Swift.Bool = true, completionHandler: @escaping (_ tripId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func endTrip(completionHandler: @escaping (_ tripId: Swift.String) -> Swift.Void, errorHandler: @escaping (_ error: NBAssetTracking.AssetError) -> Swift.Void)
  open func updateTrip(tripId: Swift.String?, tripProfile: NBAssetTracking.UpdateTripProfile, completionHandler: @escaping (_ tripId: Swift.String) -> Swift.Void, errorHandler: @escaping (NBAssetTracking.AssetError) -> Swift.Void)
  open func deleteTrip(tripId: Swift.String, completionHandler: @escaping (_ tripId: Swift.String) -> Swift.Void, errorHandler: @escaping (NBAssetTracking.AssetError) -> Swift.Void)
  open func tripSummaray(tripId: Swift.String, completionHandler: @escaping (NBAssetTracking.TripSummary) -> Swift.Void, errorHandler: @escaping (NBAssetTracking.AssetError) -> Swift.Void)
  open func getTrip(tripId: Swift.String, completionHandler: @escaping (NBAssetTracking.Trip) -> Swift.Void, errorHandler: @escaping (NBAssetTracking.AssetError) -> Swift.Void)
  open func setUserId(userId: Swift.String)
  open func setCrossPlatformInfo(info: Swift.String)
  @objc deinit
}
@objc open class TripProfile : ObjectiveC.NSObject, Swift.Codable {
  public init(customId: Swift.String? = nil, name: Swift.String, description: Swift.String? = nil, metaData: [Swift.String : Swift.String]? = nil, attributes: [Swift.String : Swift.String]? = nil, stops: [NBAssetTracking.TripStop]? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class UpdateTripProfile : ObjectiveC.NSObject, Swift.Codable {
  public init(name: Swift.String, description: Swift.String? = nil, metaData: [Swift.String : Swift.String]? = nil, attributes: [Swift.String : Swift.String]? = nil, stops: [NBAssetTracking.TripStop]? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum TrackingDisableType {
  case none
  case normal
  case assetIdTaken
  public static func == (a: NBAssetTracking.TrackingDisableType, b: NBAssetTracking.TrackingDisableType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NotificationConfig : ObjectiveC.NSObject, Swift.Codable {
  public var assetEnableNotificationConfig: NBAssetTracking.AssetEnableNotificationConfig
  public var assetDisableNotificationConfig: NBAssetTracking.AssetDisableNotificationConfig
  public var lowBatteryNotificationConfig: NBAssetTracking.LowBatteryNotificationConfig
  public var showAssetEnableNotification: Swift.Bool
  public var showAssetDisableNotification: Swift.Bool
  public var showLowBatteryNotification: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers open class DefaultAssetNotificationConfig : ObjectiveC.NSObject, Swift.Codable {
  public var identifier: Swift.String
  public var title: Swift.String
  public var content: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AssetEnableNotificationConfig : NBAssetTracking.DefaultAssetNotificationConfig {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AssetDisableNotificationConfig : NBAssetTracking.DefaultAssetNotificationConfig {
  public var assetIDTrackedContent: Swift.String
  override open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LowBatteryNotificationConfig : NBAssetTracking.DefaultAssetNotificationConfig {
  public var minBatteryLevel: Swift.Float
  override open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct TripStop : Swift.Codable {
  public var name: Swift.String?
  public var metaData: [Swift.String : Swift.String]?
  public var geofenceId: Swift.String?
  public init(name: Swift.String? = nil, metaData: [Swift.String : Swift.String]? = nil, geofenceId: Swift.String? = nil)
  public func toDictionary() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NBAssetTracking.AssetTrackingApiExceptionType : Swift.Equatable {}
extension NBAssetTracking.AssetTrackingApiExceptionType : Swift.Hashable {}
extension NBAssetTracking.AssetTrackingApiExceptionType : Swift.RawRepresentable {}
extension NBAssetTracking.LocationPermissionResult : Swift.Equatable {}
extension NBAssetTracking.LocationPermissionResult : Swift.Hashable {}
extension NBAssetTracking.TripStatus : Swift.Equatable {}
extension NBAssetTracking.TripStatus : Swift.Hashable {}
extension NBAssetTracking.RingBuffer.OverwriteOperation : Swift.Equatable {}
extension NBAssetTracking.RingBuffer.OverwriteOperation : Swift.Hashable {}
extension NBAssetTracking.TrackingMode : Swift.Equatable {}
extension NBAssetTracking.TrackingMode : Swift.Hashable {}
extension NBAssetTracking.TrackingMode : Swift.RawRepresentable {}
extension NBAssetTracking.TrackingDisableType : Swift.Equatable {}
extension NBAssetTracking.TrackingDisableType : Swift.Hashable {}
